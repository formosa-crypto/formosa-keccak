inline fn __toBitInterleaving_even (reg u32 x) -> reg u32 
{
  reg u32 t;
  t = x & 0x55555555;   // keep even position 0101....01
                        // 0 b30 0 b28 .... 0 b0
  t = t | (t >> 1);     // duplicate the bit  
                        // 0 b30 0   b28  ....  0  b0
                        // 0 0   b30 0   b28 ...b2 0   | b0
                        // 0 b30 b30 b28 b28 ... b2 b2 b0
  t = t & 0x33333333;   // keep double 00110011...0011
                        // 0 0 b30 b28 0 0 b26 b24 0 0 b25 b24 ... b2 b0
  t = t | (t >> 2);     // 00 b30 b28 b30 b28 b26 b24 b26 b24 ... b2 b0 
  t = t & 0x0F0F0F0F;   // keep double 00110011...0011
                        // 0000 b30 b28 b26 b24 0000 b22 b20 b18 b16 ... b6 b4 b2 b0 
  t = t | (t >> 4);     // 0000 b30 b28 b26 b24 b30 b28 b26 b24 b22 b20 b18 b16 ... 
  t = t & 0x00FF00FF;   // 0000 0000 b30 b28 b26 b24 b22 b20 b18 b16 0000 0000 b14 b12 ... b2 b0
  return t;
}

inline fn __toBitInterleaving_odd (reg u32 x) -> reg u32 
{
  reg u32 t;
  t = x & 0xAAAAAAAA;
  t = t | (t << 1);
  t = t & 0xCCCCCCCC;
  t = t | (t << 2);
  t = t & 0xF0F0F0F0; 
  t = t | (t << 4);
  t = t & 0xFF00FF00;
  t = t | (t << 8);
  return t;
}

inline fn __toBitInterleaving(reg u32 x0 x1 s0 s1) 
                           -> reg u32, reg u32
{
  reg u32 t;
  t = __toBitInterleaving_even(x0);
  t = #BFI(t, t, 8, 8); // 0000 0000 b30 b28 ... b16 b14 b12 ... b2 b0 b14 b12 ... b2 b0
  s0 = s0 ^ (t >> 8);
  t = __toBitInterleaving_even(x1);
  t = t | (t >> 8);
  s0 = s0 ^ (t << 16);

  t = __toBitInterleaving_odd(x0);
  s1 = s1 ^ (t >> 16);
  t = __toBitInterleaving_odd(x1);
  t = #BFC(t, 0, 16);
  s1 = s1 ^ t;
  return s0, s1;
}

/*
  t = x0 ^ (x0 >> 8);        // b15 .. b0 a15..a0 
                             // 00 b15-b8 b7-b0 a15-a8 
                             // b15-b8 b7^b17-b0^b8 a15^b7-a8^b0 a7^a15-a0^a8
  t = t & 0x0000FF00;        // 00     00           a15^b7-a8^b0  00
  x0 = x0 ^ t;               // b15 .. b0           b7-b0         a7..a0 
  x0 = x0 ^ (t << 8);        // b15 .. b0           b7-b0         a7..a0
                             // 00 a15^b7-a8^b0     00            00  
                             // b15-b8 a15-a8       b7-b0         a7..a0
*/
inline fn __fromBitInterleaving_merge(reg u32 x, inline int mask, inline int shift) -> reg u32 {
   reg u32 t;
   t = x ^ (x >> shift);
   t = t & mask;
   x = x ^ t;
   x = x ^ (t << shift);
   return x;
}

inline fn __fromBitInterleaving_merge_reg(reg u32 x, inline int imask, inline int shift) -> reg u32 {
   reg u32 t;
   reg u32 mask;
   mask = imask; 
   t = x ^ (x >> shift);
   t = t & mask;
   x = x ^ t;
   x = x ^ (t << shift);
   return x;
}

inline fn __fromBitInterleaving(reg u32 x0 x1)
                             -> reg u32, reg u32
{
  // x0 = a31 ... a0
  // x1 = b31 ... b0
  reg u32 t;
  t = x0;
  x0 = #BFI(x0, x1, 16, 16); // b15 .. b0 a15..a0 
  x1 = #BFC(x1, 0, 16);      // b31 .. b16 00000000 
  x1 = x1 | (t >> 16);       // b31 .. b16 a31 .. a16 

  x0 = __fromBitInterleaving_merge_reg(x0, 0x0000FF00, 8);
  x0 = __fromBitInterleaving_merge(x0, 0x00F000F0, 4);
  x0 = __fromBitInterleaving_merge(x0, 0x0C0C0C0C, 2);
  x0 = __fromBitInterleaving_merge(x0, 0x22222222, 1);

  x1 = __fromBitInterleaving_merge_reg(x1, 0x0000FF00, 8);
  x1 = __fromBitInterleaving_merge(x1, 0x00F000F0, 4);
  x1 = __fromBitInterleaving_merge(x1, 0x0C0C0C0C, 2);
  x1 = __fromBitInterleaving_merge(x1, 0x22222222, 1);

  return x0, x1;
}  

inline fn __eorror (reg u32 src1 src2, inline int rot1 rot2) -> reg u32 
{
  reg u32 dst;     
  if (rot1 == rot2) {
    dst = src1 ^ src2;
  } else {
  if (rot1 >u rot2) {
    dst = src1 ^ (src2 >>r (rot1 - rot2));
  } else {
    dst = src1 ^ (src2 >>r (32 + (rot1 - rot2)));
  }}
  return dst;
}  

inline fn __bicror (reg u32 src1 src2, inline int rot1 rot2) -> reg u32 
{
  reg u32 dst;
  if (rot1 == rot2) {
    dst = #BIC(src1, src2);
  } else {
  if (rot1 >=u rot2) {
    dst = #BIC(src1, (src2 >>r (rot1 - rot2)));
  } else {
    dst = #BIC(src1, (src2 >>r (32 + (rot1 - rot2))));
  }
  }
  return dst;
}  

param int KECCAK_state = 2 * 25;

param int mDa0 = 0;
param int mDa1 = 1;
param int mDo0 = 2;
param int mDo1 = 3;
param int mDi0 = 4;

inline fn __load5 (reg ptr u32[KECCAK_state] state, 
                   inline int src1 src2 src3 src4 src5) 
                -> reg u32, reg u32, reg u32, reg u32, reg u32 
{
  reg u32 dst r1 r5 r11 r12;
  dst = state[src1];
  r1  = state[src2];
  r5  = state[src3];
  r11 = state[src4];
  r12 = state[src5];
  return dst, r1, r5, r11, r12;
}      

inline fn __xor5_reg (reg u32 dst r1 r5 r11 r12,
                      inline int rot1 rot2 rot3 rot4 rot5) 
                   -> reg u32 {
  dst = __eorror(dst, r1 , rot1, rot2);
  dst = __eorror(dst, r5 , rot1, rot3);
  dst = __eorror(dst, r11, rot1, rot4);
  dst = __eorror(dst, r12, rot1, rot5);
  return dst;
}

inline fn __xor5(reg ptr u32[KECCAK_state] state, 
                 inline int src1 src2 src3 src4 src5,
                 inline int rot1 rot2 rot3 rot4 rot5) 
              -> reg u32 
{
   reg u32 dst r1 r5 r11 r12;     
   dst, r1, r5, r11, r12 = __load5(state, src1, src2, src3, src4, src5);
   dst = __xor5_reg(dst, r1, r5, r11, r12, rot1, rot2, rot3, rot4, rot5);
   return dst;
}

inline fn __xor5str_stk(reg ptr u32[KECCAK_state] state, 
                    inline int src1 src2 src3 src4 src5,
                    inline int rot1 rot2 rot3 rot4 rot5,
                    reg u32 strreg, stack u32[5] stradr, inline int strofs) 
                 -> stack u32[5], reg u32 
{
   reg u32 dst r1, r5, r11, r12;
   dst, r1, r5, r11, r12 = __load5(state, src1, src2, src3, src4, src5);
   stradr[strofs] = strreg;
   dst = __xor5_reg(dst, r1, r5, r11, r12, rot1, rot2, rot3, rot4, rot5);
   return stradr, dst;
}

inline fn __xor5str_state(reg ptr u32[KECCAK_state] state, 
                    inline int src1 src2 src3 src4 src5,
                    inline int rot1 rot2 rot3 rot4 rot5,
                    reg u32 strreg, inline int strofs) 
                 -> reg ptr u32[KECCAK_state], reg u32 
{
   reg u32 dst r1 r5 r11 r12;
   dst, r1, r5, r11, r12 = __load5(state, src1, src2, src3, src4, src5);
   state[strofs] = strreg;
   dst = __xor5_reg(dst, r1, r5, r11, r12, rot1, rot2, rot3, rot4, rot5);
   return state, dst;
}

inline fn __xorrol(reg u32 src1 src2, inline int rot) 
                -> reg u32 
{
  reg u32 dst;
  dst = src1 ^ (src2 >>r (rot - 1));
  return dst;
}

inline fn __xandnotlazy(reg u32 src1 src2 src3,
                        inline int rot1 rot2 rot3) 
                     -> reg u32
{
  reg u32 r1;
  r1 = __bicror(src3, src2, rot3, rot2);
  r1 = __eorror(r1, src1, rot3, rot1);
  return r1;
}

inline fn __xandnotlazystr(reg ptr u32[KECCAK_state] state, inline int resofs,
                           reg u32 src1 src2 src3,
                           inline int rot1 rot2 rot3) 
                        -> reg ptr u32[KECCAK_state]
{
  reg u32 r1;
  r1 = __xandnotlazy(src1, src2, src3, rot1, rot2, rot3);
  state[resofs] = r1;
  return state;
}

inline fn __xandnotstr(reg ptr u32[KECCAK_state] state, inline int resofs,
                       reg u32 src1 src2 src3,
                       inline int rot1 rot2 rot3) 
                    -> reg ptr u32[KECCAK_state] 
{
  reg u32 r1;
  r1 = __xandnotlazy(src1, src2, src3, rot1, rot2, rot3);    
  if (rot3 > 0) {
    r1 = r1 >>r (32-rot3);
  }
  state[resofs] = r1;
  return state;
}   

inline fn __xandnot (reg u32 src1 src2 src3,
                     inline int rot1 rot2 rot3) 
                  -> reg u32 
{
  reg u32 r1;
  r1 = __xandnotlazy(src1, src2, src3, rot1, rot2, rot3);    
  if (rot3 > 0) {
    r1 = r1 >>r (32-rot3);
  }
  return r1;
}   

inline fn __xandnotiota(stack ptr u32[8] sRCWT_line,
                        reg u32 r3 r4 r5,
                        inline int rot3 rot2 rcofs) 
                     -> reg u32 
{
  reg u32 out;
  reg ptr u32[8] RCWT_line;
  r5 = __bicror(r5, r4, rot3, rot2);
  RCWT_line = sRCWT_line;
  r4 = RCWT_line[rcofs];
  if (rot3 > 0) {
    r3 = r3 ^ (r5 >>r (32 - rot3));
  } else {
    r3 = r3 ^ r5;
  }   
  out = r4 ^ r3;
  return out;
}

inline fn __addparror (reg u32 r, reg u32 par, inline int dly)
                    -> reg u32 
{
  if (dly >u 0) {
    r = par ^ (r >>r (32 - dly));
  } else {
    r = par ^ r;
  }
  return r;
}
   
inline fn __addparity(reg u32 r3 par1, inline int dly1,
                      reg u32 r4 par2, inline int dly2,
                      reg u32 r5 par3, inline int dly3,
                      reg u32 r6 par4, inline int dly4,
                      reg u32 r7 par5, inline int dly5)
                   -> reg u32, reg u32, reg u32, reg u32, reg u32
{
  r3 = __addparror(r3, par1, dly1);
  r4 = __addparror(r4, par2, dly2);
  r5 = __addparror(r5, par3, dly3);
  r6 = __addparror(r6, par4, dly4);
  r7 = __addparror(r7, par5, dly5);
  return r3, r4, r5, r6, r7;
}

inline fn __KeccakThetaRhoPiChiIota(reg ptr u32[KECCAK_state] state, stack ptr u32[8] sRCWT_line,
                                    inline int src1, reg u32 par1, inline int      dly1,
                                    inline int src2, reg u32 par2, inline int rot2 dly2,
                                    inline int src3, reg u32 par3, inline int rot3 dly3,
                                    inline int src4, reg u32 par4, inline int rot4 dly4,
                                    inline int src5, reg u32 par5, inline int rot5 dly5,
                                    reg u32 r1, 
                                    inline int rcofs lazy strofs)
                                 -> reg ptr u32[KECCAK_state], reg u32
{
  reg u32 r3 r4 r5 r6 r7, reg_; 
  r3, r4, r5, r6, r7 = __load5(state, src1, src2, src3, src4, src5);
  state[strofs] = r1;
  r3, r4, r5, r6, r7 = __addparity(r3, par1, dly1,
                                   r4, par2, dly2,
                                   r5, par3, dly3,
                                   r6, par4, dly4,
                                   r7, par5, dly5);
                                   
  if (lazy == 1) {
    state = __xandnotlazystr(state, src2, r4, r5, r6, rot2, rot3, rot4);
    state = __xandnotlazystr(state, src3, r5, r6, r7, rot3, rot4, rot5);
    state = __xandnotlazystr(state, src4, r6, r7, r3, rot4, rot5,    0);
    state = __xandnotlazystr(state, src5, r7, r3, r4, rot5,    0, rot2);
  } else {
    state = __xandnotstr    (state, src2, r4, r5, r6, rot2, rot3, rot4);
    state = __xandnotstr    (state, src3, r5, r6, r7, rot3, rot4, rot5);
    state = __xandnotstr    (state, src4, r6, r7, r3, rot4, rot5,    0);
    state = __xandnotstr    (state, src5, r7, r3, r4, rot5,    0, rot2);
  }

  reg_ = __xandnotiota(sRCWT_line, r3, r4, r5, rot3, rot2, rcofs);
  return state, reg_;
}

inline fn __KeccakThetaRhoPiChi(reg ptr u32[KECCAK_state] state,
                                inline int src1 dst1, reg u32 par1, inline int rot1 dly1, 
                                inline int src2 dst2, reg u32 par2, inline int rot2 dly2, 
                                inline int src3 dst3, reg u32 par3, inline int rot3 dly3, 
                                inline int src4 dst4, reg u32 par4, inline int rot4 dly4, 
                                inline int src5 _dst, reg u32 par5, inline int rot5 dly5, 
                                reg u32 r1, inline int lazy strofs) 
                             -> reg ptr u32[KECCAK_state], reg u32
{
  reg u32 r3 r4 r5 r6 r7; 
  r3, r4, r5, r6, r7 = __load5(state, src1, src2, src3, src4, src5);
  state[strofs] = r1;
  r3, r4, r5, r6, r7 = __addparity(r3, par1, dly1,
                                   r4, par2, dly2,
                                   r5, par3, dly3,
                                   r6, par4, dly4,
                                   r7, par5, dly5);
  
  if (lazy == 1) {
    state = __xandnotlazystr(state, dst1, r3, r4, r5, rot1, rot2, rot3);
    state = __xandnotlazystr(state, dst2, r4, r5, r6, rot2, rot3, rot4);
    state = __xandnotlazystr(state, dst3, r5, r6, r7, rot3, rot4, rot5);
    state = __xandnotlazystr(state, dst4, r6, r7, r3, rot4, rot5, rot1);
    r1    = __xandnotlazy   (             r7, r3, r4, rot5, rot1, rot2);
  } else {
    state = __xandnotstr    (state, dst1, r3, r4, r5, rot1, rot2, rot3);
    state = __xandnotstr    (state, dst2, r4, r5, r6, rot2, rot3, rot4);
    state = __xandnotstr    (state, dst3, r5, r6, r7, rot3, rot4, rot5);
    state = __xandnotstr    (state, dst4, r6, r7, r3, rot4, rot5, rot1);
    r1    = __xandnot       (             r7, r3, r4, rot5, rot1, rot2);
  }
  return state, r1;
}

inline fn __KeccakThetaRhoPiChi_nostr(reg ptr u32[KECCAK_state] state,
                                inline int src1 dst1, reg u32 par1, inline int rot1 dly1, 
                                inline int src2 dst2, reg u32 par2, inline int rot2 dly2, 
                                inline int src3 dst3, reg u32 par3, inline int rot3 dly3, 
                                inline int src4 dst4, reg u32 par4, inline int rot4 dly4, 
                                inline int src5 _dst, reg u32 par5, inline int rot5 dly5, 
                                inline int lazy) 
                             -> reg ptr u32[KECCAK_state], reg u32
{
  reg u32 r1, r3 r4 r5 r6 r7; 
  r3, r4, r5, r6, r7 = __load5(state, src1, src2, src3, src4, src5);
  r3, r4, r5, r6, r7 = __addparity(r3, par1, dly1,
                                   r4, par2, dly2,
                                   r5, par3, dly3,
                                   r6, par4, dly4,
                                   r7, par5, dly5);
  
  if (lazy == 1) {
    state = __xandnotlazystr(state, dst1, r3, r4, r5, rot1, rot2, rot3);
    state = __xandnotlazystr(state, dst2, r4, r5, r6, rot2, rot3, rot4);
    state = __xandnotlazystr(state, dst3, r5, r6, r7, rot3, rot4, rot5);
    state = __xandnotlazystr(state, dst4, r6, r7, r3, rot4, rot5, rot1);
    r1    = __xandnotlazy   (             r7, r3, r4, rot5, rot1, rot2);
  } else {
    state = __xandnotstr    (state, dst1, r3, r4, r5, rot1, rot2, rot3);
    state = __xandnotstr    (state, dst2, r4, r5, r6, rot2, rot3, rot4);
    state = __xandnotstr    (state, dst3, r5, r6, r7, rot3, rot4, rot5);
    state = __xandnotstr    (state, dst4, r6, r7, r3, rot4, rot5, rot1);
    r1    = __xandnot       (             r7, r3, r4, rot5, rot1, rot2);
  }
  return state, r1;
}

param int Aba0 = 0;
param int Aba1 = 1;
param int Abe0 = 2;
param int Abe1 = 3;
param int Abi0 = 4;
param int Abi1 = 5;
param int Abo0 = 6;
param int Abo1 = 7;
param int Abu0 = 8;
param int Abu1 = 9;
param int Aga0 = 10;
param int Aga1 = 11;
param int Age0 = 12;
param int Age1 = 13;
param int Agi0 = 14;
param int Agi1 = 15;
param int Ago0 = 16;
param int Ago1 = 17;
param int Agu0 = 18;
param int Agu1 = 19;
param int Aka0 = 20;
param int Aka1 = 21;
param int Ake0 = 22;
param int Ake1 = 23;
param int Aki0 = 24;
param int Aki1 = 25;
param int Ako0 = 26;
param int Ako1 = 27;
param int Aku0 = 28;
param int Aku1 = 29;
param int Ama0 = 30;
param int Ama1 = 31;
param int Ame0 = 32;
param int Ame1 = 33;
param int Ami0 = 34;
param int Ami1 = 35;
param int Amo0 = 36;
param int Amo1 = 37;
param int Amu0 = 38;
param int Amu1 = 39;
param int Asa0 = 40;
param int Asa1 = 41;
param int Ase0 = 42;
param int Ase1 = 43;
param int Asi0 = 44;
param int Asi1 = 45;
param int Aso0 = 46;
param int Aso1 = 47;
param int Asu0 = 48;
param int Asu1 = 49;

inline fn __KeccakRound0(reg ptr u32[KECCAK_state] state, stack u32[5] smD, stack ptr u32[8] sRCWT_line)
                      -> reg ptr u32[KECCAK_state], stack u32[5], reg u32
{
  reg u32 r1 r2 r3 r4 r6 r7 r8 r9 r10 r11 r12 r14;

  r3 = __xor5(state, Abu0, Agu0, Aku0, Amu0, Asu0, 0, 0, 0, 0, 0);
  r7 = __xor5(state, Abe1, Age1, Ake1, Ame1, Ase1, 0, 0, 0, 0, 0);
  r6 = __xorrol(r3, r7, 32);
  smD, r4 = __xor5str_stk(state, Abi1, Agi1, Aki1, Ami1, Asi1, 0, 0, 0, 0, 0, r6, smD, mDa0);
  r6 = r3 ^ r4;
  smD, r3 = __xor5str_stk(state, Abo0, Ago0, Ako0, Amo0, Aso0, 0, 0, 0, 0, 0, r6, smD, mDo1);
  r2 = r7 ^ r3;
  r7 = __xor5(state, Aba0, Aga0, Aka0, Ama0, Asa0, 0, 0, 0, 0, 0);
  r10 = __xorrol(r7, r4, 32);
  r4 = __xor5(state, Abo1, Ago1, Ako1, Amo1, Aso1, 0, 0, 0, 0, 0);
  r14 = r4 ^ r7;
  r7 = __xor5(state, Abe0, Age0, Ake0, Ame0, Ase0, 0, 0, 0, 0, 0);
  r6 = __xorrol(r7, r4, 32);
  smD, r4 = __xor5str_stk(state, Abu1, Agu1, Aku1, Amu1, Asu1, 0, 0, 0, 0, 0, r6, smD, mDi0);
  r8 = r4 ^ r7;
  smD, r7 = __xor5str_stk(state, Abi0, Agi0, Aki0, Ami0, Asi0, 0, 0, 0, 0, 0, r8, smD, mDa1);
  r9 = __xorrol(r7, r4, 32);
  smD, r4 = __xor5str_stk(state, Aba1, Aga1, Aka1, Ama1, Asa1, 0, 0, 0, 0, 0, r9, smD, mDo0);
  r11 = r4 ^ r7; 
  r12 = __xorrol(r3, r4, 32);
  state, r1 = __KeccakThetaRhoPiChi_nostr(state, 
                                    Abo0, Aka1,  r9, 14, 0, 
                                    Agu0, Ame1, r12, 10, 0,
                                    Aka1, Asi1,  r8,  2, 0,
                                    Ame1, Abo0, r11, 23, 0,
                                    Asi1, Agu0,  r2, 31, 0,
                                    1);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Abe0, Asa1, r10,  0, 0,
                                    Agi1, Abe0,  r2,  3, 0,
                                    Ako0, Agi1,  r9, 12, 0,
                                    Amu1, Ako0, r14,  4, 0,
                                    Asa1, Amu1,  r8,  9, 0,
                                    r1, 1, Agu0);
  r8 = smD[mDa0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Abu1, Aga0, r14, 14, 0,
                                    Aga0, Ake0,  r8, 18, 0,
                                    Ake0, Ami1, r10,  5, 0,
                                    Ami1, Aso0,  r2,  8, 0,
                                    Aso0, Abu1,  r9, 28, 0,
                                    r1, 1, Amu1);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Abi1, Ama0,  r2, 31, 0,
                                    Ago0, Ase1,  r9, 27, 0,
                                    Aku0, Abi1, r12, 19, 0,
                                    Ama0, Ago0,  r8, 20, 0,
                                    Ase1, Aku0, r11,  1, 0,
                                    r1, 1, Abu1);
  r9= smD[mDo1];
  state, r1 = __KeccakThetaRhoPiChiIota(state, sRCWT_line,
                                        Aba0,  r8,     0,
                                        Age0, r10, 22, 0,
                                        Aki1,  r2, 22, 0, 
                                        Amo1,  r9, 11, 0,
                                        Asu0, r12,  7, 0,
                                        r1, 0, 1, Aku0);
  r2 = smD[mDi0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Abo1, Aka0,  r9, 14, 0,
                                    Agu1, Ame0, r14, 10, 0,
                                    Aka0, Asi0,  r8,  1, 0,
                                    Ame0, Abo1, r10, 22, 0,
                                    Asi0, Agu1,  r2, 30, 0,
                                    r1, 1, Aba0);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Abe1, Asa0, r11,  1, 0,
                                    Agi0, Abe1,  r2,  3, 0,
                                    Ako1, Agi0,  r9, 13, 0,
                                    Amu0, Ako1, r12,  4, 0,
                                    Asa0, Amu0,  r8,  9, 0,
                                    r1, 1, Agu1);
  r8 = smD[mDa1];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Abu0, Aga1, r12, 13, 0,
                                    Aga1, Ake1,  r8, 18, 0,
                                    Ake1, Ami0, r11,  5, 0,
                                    Ami0, Aso1,  r2,  7, 0,
                                    Aso1, Abu0,  r9, 28, 0,
                                    r1, 1, Amu0);
  state, r1 = __KeccakThetaRhoPiChi(state, 
                                    Abi0, Ama1,  r2, 31, 0,
                                    Ago1, Ase0,  r9, 28, 0,
                                    Aku1, Abi0, r14, 20, 0,
                                    Ama1, Ago1,  r8, 21, 0,
                                    Ase0, Aku1, r10,  1, 0,
                                    r1, 1, Abu0);
  r9 = smD[mDo0];
  state, r14 = __KeccakThetaRhoPiChiIota(state, sRCWT_line, 
                                         Aba1,  r8,  0, 
                                         Age1, r11, 22, 0,
                                         Aki0,  r2, 21, 0,
                                         Amo0,  r9, 10, 0,
                                         Asu1, r14,  7, 0,
                                         r1, 1, 1, Aku1);

  return state, smD, r14;
}

inline fn __KeccakRound1(reg ptr u32[KECCAK_state] state, stack u32[5] smD, stack ptr u32[8] sRCWT_line, reg u32 r14)
                      -> reg ptr u32[KECCAK_state], stack u32[5], reg u32
{
  reg u32 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12; 

  state, r3 = __xor5str_state(state, Asu0, Agu0, Amu0, Abu1, Aku1, 22, 10,  3, 18, 28, r14, Aba1);
  r7 = __xor5(state, Age1, Ame0, Abe0, Ake1, Ase1, 10, 22,  4,  7, 20);
  r3 = r3 >>r (32-22);
  r6 = __xorrol(r3, r7, 32-10);
  smD, r4 = __xor5str_stk(state, Aki0, Asi0, Agi1, Ami0, Abi1,  7, 30,  9, 28,  1, r6, smD, mDa0);
  r6 = r3 ^ (r4 >>r (32 - 7));
  smD, r3 = __xor5str_stk(state, Amo1, Abo0, Ako1, Aso0, Ago1,  0, 14,  1, 14, 31, r6, smD, mDo1);
  r2 = r3 ^ (r7 >>r (32-10));
  r7 = __xor5(state, Aba0, Aka1, Asa0, Aga0, Ama1,  0,  2, 13,  5, 20);
  r10 = __xorrol(r7, r4, 32-7);
  r4 = __xor5(state, Amo0, Abo1, Ako0, Aso1, Ago0,  0, 14,  0, 13, 31);
  r14 = r4 ^ r7;
  r7 = __xor5(state, Age0, Ame1, Abe1, Ake0, Ase0, 11, 23,  4,  8, 21);
  r7 = r7 >>r (32-11);
  r6 = __xorrol(r7, r4, 32);
  smD, r4 = __xor5str_stk(state, Asu1, Agu1, Amu1, Abu0, Aku0, 22, 10,  3, 18, 27, r6, smD, mDi0);
  r8 = r7 ^ (r4 >>r (32-22));
  smD, r7 = __xor5str_stk(state, Aki1, Asi1, Agi0, Ami1, Abi0,  7, 31,  9, 28,  1, r8, smD, mDa1);
  r7 =  r7 >>r (32-7);
  r9 = __xorrol(r7, r4, 32-22);
  smD, r4 = __xor5str_stk(state, Aba1, Aka0, Asa1, Aga1, Ama0,  0,  1, 12,  5, 19, r9, smD, mDo0);
  r11 = r4 ^ r7;
  r12 = __xorrol(r3, r4, 32);
  state, r1 = __KeccakThetaRhoPiChi_nostr(state,
                                    Amo1, Asa1,  r9, 14,  0,
                                    Agu0, Ake1, r12, 10, 10,
                                    Asa1, Abi1,  r8,  2, 12,
                                    Ake1, Amo1, r11, 23,  7,
                                    Abi1, Agu0,  r2, 31,  1,
                                    1);
  state, r1 = __KeccakThetaRhoPiChi(state, 
                                    Age0, Ama0, r10,  0, 11,
                                    Asi0, Age0,  r2,  3, 30,
                                    Ako1, Asi0,  r9, 12,  1,
                                    Abu0, Ako1, r14,  4, 18,
                                    Ama0, Abu0,  r8,  9, 19,
                                    r1, 1, Agu0);
  r8 = smD [mDa0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Asu1, Aka1, r14, 14, 22,
                                    Aka1, Abe1,  r8, 18,  2,
                                    Abe1, Ami0, r10,  5,  4,
                                    Ami0, Ago1,  r2,  8, 28,
                                    Ago1, Asu1,  r9, 28, 31,
                                    r1, 1, Abu0);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Aki0, Aga0,  r2, 31,  7,
                                    Abo0, Ase1,  r9, 27, 14,
                                    Amu0, Aki0, r12, 19,  3,
                                    Aga0, Abo0,  r8, 20,  5,
                                    Ase1, Amu0, r11,  1, 20,
                                    r1, 1, Asu1);
  r9 = smD[mDo1];
  state, r1 = __KeccakThetaRhoPiChiIota(state, sRCWT_line, 
                                    Aba0,  r8,      0,   
                                    Ame1, r10, 22, 23, 
                                    Agi1,  r2, 22,  9,
                                    Aso1,  r9, 11, 13,
                                    Aku1, r12,  7, 28,
                                    r1, 2, 1, Amu0);
  r2 = smD[mDi0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Amo0, Asa0,  r9, 14,  0,
                                    Agu1, Ake0, r14, 10, 10,
                                    Asa0, Abi0,  r8,  1, 13,
                                    Ake0, Amo0, r10, 22,  8,
                                    Abi0, Agu1,  r2, 30,  1,
                                    r1, 1, Aba0);

  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Age1, Ama1, r11,  1, 10,
                                    Asi1, Age1,  r2,  3, 31,
                                    Ako0, Asi1,  r9, 13,  0,
                                    Abu1, Ako0, r12,  4, 18,
                                    Ama1, Abu1,  r8,  9, 20,
                                    r1, 1, Agu1);
  r8 = smD[mDa1]; 
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Asu0, Aka0, r12, 13, 22,
                                    Aka0, Abe0,  r8, 18,  1,
                                    Abe0, Ami1, r11,  5,  4,
                                    Ami1, Ago0,  r2,  7, 28,
                                    Ago0, Asu0,  r9, 28, 31,
                                    r1, 1, Abu1);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Aki1, Aga1,  r2, 31,  7,
                                    Abo1, Ase0,  r9, 28, 14,
                                    Amu1, Aki1, r14, 20,  3,
                                    Aga1, Abo1,  r8, 21,  5,
                                    Ase0, Amu1, r10,  1, 21,
                                    r1, 1, Asu0);
  r9 = smD[mDo0];
  state, r14 = __KeccakThetaRhoPiChiIota(state, sRCWT_line,
                                         Aba1,  r8,  0,
                                         Ame0, r11, 22, 22,
                                         Agi0,  r2, 21,  9,
                                         Aso0,  r9, 10, 14,
                                         Aku0, r14,  7, 27,
                                         r1, 3, 1, Amu1);
  return state, smD, r14;
}

inline fn __KeccakRound2(reg ptr u32[KECCAK_state] state, stack u32[5] smD, stack ptr u32[8] sRCWT_line, reg u32 r14)
                      -> reg ptr u32[KECCAK_state], stack u32[5], reg u32
{ 
  reg u32 r1 r2 r3 r4 r6 r7 r8 r9 r10 r11 r12;
  state, r3 = __xor5str_state(state, Aku1, Agu0, Abu1, Asu1, Amu1, 22, 10,  3, 18, 28, r14, Aba1);
  r7 = __xor5(state, Ame0, Ake0, Age0, Abe0, Ase1, 10, 22,  4,  7, 20);
  r3 = r3 >>r (32-22);
  r6 = __xorrol(r3, r7, 32-10);
  smD, r4 = __xor5str_stk(state, Agi0, Abi0, Asi0, Ami1, Aki0,  7, 30,  9, 28,  1, r6, smD, mDa0);
  r6 = r3 ^ (r4 >>r (32-7));
  smD, r3 = __xor5str_stk(state, Aso1, Amo1, Ako0, Ago1, Abo1,  0, 14,  1, 14, 31, r6, smD, mDo1);
  r2 = r3 ^ (r7 >>r (32-10));
  r7 = __xor5(state, Aba0, Asa1, Ama1, Aka1, Aga1,  0,  2, 13,  5, 20);
  r10 = __xorrol(r7, r4, 32-7);
  r4 = __xor5(state, Aso0, Amo0, Ako1, Ago0, Abo0,  0, 14,  0, 13, 31);
  r14 = r4 ^ r7;
  r7 = __xor5(state, Ame1, Ake1, Age1, Abe1, Ase0, 11, 23,  4,  8, 21);
  r7 = r7 >>r (32-11);
  r6 = __xorrol(r7, r4, 32);
  smD, r4 = __xor5str_stk(state, Aku0, Agu1, Abu0, Asu0, Amu0, 22, 10,  3, 18, 27, r6, smD, mDi0);
  r8 = r7 ^ (r4 >>r (32-22));
  smD, r7 = __xor5str_stk(state, Agi1, Abi1, Asi1, Ami0, Aki1,  7, 31,  9, 28,  1, r8, smD, mDa1);
  r7 = r7 >>r (32-7);
  r9 = __xorrol(r7, r4, 32-22);
  smD, r4 = __xor5str_stk(state, Aba1, Asa0, Ama0, Aka0, Aga0,  0,  1, 12,  5, 19, r9, smD, mDo0);
  r11 = r4 ^ r7;
  r12 = __xorrol(r3, r4, 32);
  state, r1 = __KeccakThetaRhoPiChi_nostr(state,
                                    Aso1, Ama0,  r9, 14,  0,
                                    Agu0, Abe0, r12, 10, 10,
                                    Ama0, Aki0,  r8,  2, 12,
                                    Abe0, Aso1, r11, 23,  7,
                                    Aki0, Agu0,  r2, 31,  1,
                                    1);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Ame1, Aga0, r10,  0, 11,
                                    Abi0, Ame1,  r2,  3, 30,
                                    Ako0, Abi0,  r9, 12,  1,
                                    Asu0, Ako0, r14,  4, 18,
                                    Aga0, Asu0,  r8,  9, 19,
                                    r1, 1, Agu0);
  r8 = smD[mDa0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Aku0, Asa1, r14, 14, 22,
                                    Asa1, Age1,  r8, 18,  2,
                                    Age1, Ami1, r10,  5,  4,
                                    Ami1, Abo1,  r2,  8, 28,
                                    Abo1, Aku0,  r9, 28, 31,
                                    r1, 1, Asu0);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Agi0, Aka1,  r2, 31,  7,            
                                    Amo1, Ase1,  r9, 27, 14,            
                                    Abu1, Agi0, r12, 19,  3,            
                                    Aka1, Amo1,  r8, 20,  5,            
                                    Ase1, Abu1, r11,  1, 20,
                                    r1, 1, Aku0);
  r9 = smD[mDo1];
  state, r1 = __KeccakThetaRhoPiChiIota(state, sRCWT_line,
                                    Aba0, r8,  0,    
                                    Ake1, r10,22, 23,
                                    Asi0, r2, 22,  9,
                                    Ago0, r9, 11, 13,
                                    Amu1, r12, 7, 28,
                                    r1, 4, 1, Abu1);
  r2 = smD[mDi0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Aso0, Ama1,  r9, 14,  0,
                                    Agu1, Abe1, r14, 10, 10,
                                    Ama1, Aki1,  r8,  1, 13,
                                    Abe1, Aso0, r10, 22,  8,
                                    Aki1, Agu1,  r2, 30,  1,
                                    r1, 1, Aba0);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Ame0, Aga1, r11,  1, 10,
                                    Abi1, Ame0,  r2,  3, 31,
                                    Ako1, Abi1,  r9, 13,  0,
                                    Asu1, Ako1, r12,  4, 18,
                                    Aga1, Asu1,  r8,  9, 20,
                                    r1, 1, Agu1);
  r8 = smD[mDa1];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Aku1, Asa0, r12, 13, 22,
                                    Asa0, Age0,  r8, 18,  1,
                                    Age0, Ami0, r11,  5,  4,
                                    Ami0, Abo0,  r2,  7, 28,
                                    Abo0, Aku1,  r9, 28, 31,
                                    r1, 1, Asu1);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Agi1, Aka0,  r2, 31,  7,
                                    Amo0, Ase0,  r9, 28, 14,
                                    Abu0, Agi1, r14, 20,  3,
                                    Aka0, Amo0,  r8, 21,  5,
                                    Ase0, Abu0, r10,  1, 21,
                                    r1, 1, Aku1);
  r9 = smD[mDo0];
  state, r14 = __KeccakThetaRhoPiChiIota(state, sRCWT_line,
                                   Aba1,  r8,  0,     
                                   Ake0, r11, 22, 22, 
                                   Asi1,  r2, 21,  9, 
                                   Ago1,  r9, 10, 14, 
                                   Amu0, r14,  7, 27, 
                                   r1, 5, 1, Abu0);
  return state, smD, r14;
}

inline fn __KeccakRound3(reg ptr u32[KECCAK_state] state, stack u32[5] smD, stack ptr u32[8] sRCWT_line, reg u32 r14)
                      -> reg ptr u32[KECCAK_state], stack u32[5]
{
  reg u32 r1 r2 r3 r4 r6 r7 r8 r9 r10 r11 r12;
  state, r3 = __xor5str_state(state, Amu1, Agu0, Asu1, Aku0, Abu0, 22, 10,  3, 18, 28, r14, Aba1);
  r7 = __xor5(state, Ake0, Abe1, Ame1, Age0, Ase1, 10, 22,  4,  7, 20);
  r3 = r3 >>r (32-22);
  r6 = __xorrol(r3, r7, 32-10);
  smD, r4 = __xor5str_stk(state, Asi1, Aki1, Abi0, Ami0, Agi0,  7, 30,  9, 28,  1, r6, smD, mDa0);
  r6 = r3 ^ (r4 >>r (32-7));
  smD, r3 = __xor5str_stk(state, Ago0, Aso1, Ako1, Abo1, Amo0,  0, 14,  1, 14, 31, r6, smD, mDo1);
  r2 = r3 ^ (r7 >>r (32-10));
  r7 = __xor5(state, Aba0, Ama0, Aga1, Asa1, Aka0,  0,  2, 13,  5, 20);
  r10 = __xorrol(r7, r4, 32-7);
  r4 = __xor5(state, Ago1, Aso0, Ako0, Abo0, Amo1,  0, 14,  0, 13, 31);
  r14 = r4 ^ r7;
  r7 = __xor5(state, Ake1, Abe0, Ame0, Age1, Ase0, 11, 23,  4,  8, 21);
  r7 = r7 >>r (32-11);
  r6 = __xorrol(r7, r4, 32);
  smD, r4 = __xor5str_stk(state, Amu0, Agu1, Asu0, Aku1, Abu1, 22, 10,  3, 18, 27, r6, smD, mDi0);
  r8 = r7 ^ (r4 >>r (32-22));
  smD, r7 = __xor5str_stk(state, Asi0, Aki0, Abi1, Ami1, Agi1,  7, 31,  9, 28,  1, r8, smD, mDa1);
  r7 = r7 >>r (32-7);
  r9 = __xorrol(r7, r4, 32-22);
  smD, r4 = __xor5str_stk(state, Aba1, Ama1, Aga0, Asa0, Aka1,  0,  1, 12,  5, 19, r9, smD, mDo0);
  r11 = r4 ^ r7;
  r12 = __xorrol(r3, r4, 32);
  state, r1 = __KeccakThetaRhoPiChi_nostr(state,
                                    Ago0, Aga0,  r9, 14,  0,
                                    Agu0, Age0, r12, 10, 10,
                                    Aga0, Agi0,  r8,  2, 12,
                                    Age0, Ago0, r11, 23,  7,
                                    Agi0, Agu0,  r2, 31,  1,
                                    0);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Ake1, Aka1, r10,  0, 11,
                                    Aki1, Ake1,  r2,  3, 30,
                                    Ako1, Aki1,  r9, 12,  1,
                                    Aku1, Ako1, r14,  4, 18,
                                    Aka1, Aku1,  r8,  9, 19,
                                    r1, 0, Agu0);
  r8 = smD[mDa0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Amu0, Ama0, r14, 14, 22,
                                    Ama0, Ame0,  r8, 18,  2,
                                    Ame0, Ami0, r10,  5,  4,
                                    Ami0, Amo0,  r2,  8, 28,
                                    Amo0, Amu0,  r9, 28, 31,
                                    r1, 0, Aku1);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Asi1, Asa1,  r2, 31,  7,
                                    Aso1, Ase1,  r9, 27, 14,
                                    Asu1, Asi1, r12, 19,  3,
                                    Asa1, Aso1,  r8, 20,  5,
                                    Ase1, Asu1, r11,  1, 20,
                                    r1, 0, Amu0);
  r9 = smD[mDo1];
  state, r1 = __KeccakThetaRhoPiChiIota(state, sRCWT_line,
                                    Aba0,  r8,  0,    
                                    Abe0, r10, 22, 23,
                                    Abi0,  r2, 22,  9,
                                    Abo0,  r9, 11, 13,
                                    Abu0, r12,  7, 28,
                                    r1, 6, 0, Asu1);
  r2 = smD[mDi0];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Ago1, Aga1,  r9, 14,  0,
                                    Agu1, Age1, r14, 10, 10,
                                    Aga1, Agi1,  r8,  1, 13,
                                    Age1, Ago1, r10, 22,  8,
                                    Agi1, Agu1,  r2, 30,  1,
                                    r1, 0, Aba0);
  state, r1 = __KeccakThetaRhoPiChi(state,     
                                    Ake0, Aka0, r11,  1, 10,
                                    Aki0, Ake0,  r2,  3, 31,
                                    Ako0, Aki0,  r9, 13,  0,
                                    Aku0, Ako0, r12,  4, 18,
                                    Aka0, Aku0,  r8,  9, 20,
                                    r1, 0, Agu1);
  r8 = smD[mDa1];
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Amu1, Ama1, r12, 13, 22,
                                    Ama1, Ame1,  r8, 18,  1,
                                    Ame1, Ami1, r11,  5,  4,
                                    Ami1, Amo1,  r2,  7, 28,
                                    Amo1, Amu1,  r9, 28, 31,
                                    r1, 0, Aku0);
  state, r1 = __KeccakThetaRhoPiChi(state,
                                    Asi0, Asa0,  r2, 31,  7,
                                    Aso0, Ase0,  r9, 28, 14,
                                    Asu0, Asi0, r14, 20,  3,
                                    Asa0, Aso0,  r8, 21,  5,
                                    Ase0, Asu0, r10,  1, 21,
                                    r1, 0, Amu1);
  r9 = smD[mDo0];
  state, r1 = __KeccakThetaRhoPiChiIota(state, sRCWT_line, 
                                    Aba1,  r8, 0,      
                                    Abe1, r11, 22, 22, 
                                    Abi1,  r2, 21,  9, 
                                    Abo1,  r9, 10, 14, 
                                    Abu1, r14,  7, 27, 
                                    r1, 7, 0, Asu0);
  state[Aba1] = r1;
  return state, smD;
}

u32[2 * 24] KeccakF1600_StatePermute_RoundConstantsWithTerminator =
{ 0x00000001,	0x00000000,
  0x00000000,	0x00000089,
  0x00000000,	0x8000008b,
  0x00000000,	0x80008080,

  0x00000001,	0x0000008b,
  0x00000001,	0x00008000,
  0x00000001,	0x80008088,
  0x00000001,	0x80000082,

  0x00000000,	0x0000000b,
  0x00000000,	0x0000000a,
  0x00000001,	0x00008082,
  0x00000000,	0x00008003,

  0x00000001,	0x0000808b,
  0x00000001,	0x8000000b,
  0x00000001,	0x8000008a,
  0x00000001,	0x80000081,

  0x00000000,	0x80000081,
  0x00000000,	0x80000008,
  0x00000000,	0x00000083,
  0x00000000,	0x80008003,

  0x00000001,	0x80008088,
  0x00000000,	0x80000088,
  0x00000001,	0x00008000,
  0x00000000,	0x80008082 };


#[returnaddress=stack]
fn KeccakRounds(reg ptr u32[KECCAK_state] state, reg ptr u32[8] RCWT_line) 
             -> reg ptr u32[KECCAK_state]
{
  stack u32[5] smD;
  stack ptr u32[8] sRCWT_line;
  reg u32 r14;

  sRCWT_line = RCWT_line;
  state, smD, r14 = __KeccakRound0(state, smD, sRCWT_line);
  state, smD, r14 = __KeccakRound1(state, smD, sRCWT_line, r14);
  state, smD, r14 = __KeccakRound2(state, smD, sRCWT_line, r14); 
  state, smD      = __KeccakRound3(state, smD, sRCWT_line, r14);
  return state;
}  

fn _KeccakF1600_StatePermute(reg ptr u32[KECCAK_state] state)
                         -> reg ptr u32[KECCAK_state] 
{
 
  reg ptr u32[8] RCWT_line;
  inline int i;

  for i = 0 to 6 {
     RCWT_line = KeccakF1600_StatePermute_RoundConstantsWithTerminator[8 * i : 8];
     state = KeccakRounds(state, RCWT_line);
  }

  return state;
}


fn _toBitInterleaving(reg u32 x0 x1 s0 s1)
                           -> reg u32, reg u32
{
  s0, s1 = __toBitInterleaving(x0,x1,s0,s1);
  return s0, s1;
}

fn _stateTopqm4(reg ptr u32[KECCAK_state] state)
   -> reg ptr u32[KECCAK_state]
{
  reg u32 s0 s1 d0 d1;
  inline int i;
  for i = 0 to 25 {
    s0 = 0;
    s1 = 0;
    d0 = state[2*i];
    d1 = state[2*i+1];
    s0, s1 = _toBitInterleaving(d0, d1, s0, s1);
    state[2*i] = s0;
    state[2*i+1] = s1;
  }
  return state;
}

fn _fromBitInterleaving(reg u32 x0 x1)
                             -> reg u32, reg u32
{
  x0, x1 = __fromBitInterleaving(x0, x1);
  return x0, x1;
}

fn _pqm4Tostate(reg ptr u32[KECCAK_state] state)
   -> reg ptr u32[KECCAK_state]
{
  reg u32 s0 s1;
  inline int i;
  for i = 0 to 25 {
    s0 = state[2*i];
    s1 = state[2*i+1];
    s0, s1 = _fromBitInterleaving(s0, s1);
    state[2*i] = s0;
    state[2*i+1] = s1;
  }
  return state;
}

/* 
export fn KeccakF1600_StatePermute(reg ptr u32[KECCAK_state] state)
                             -> reg ptr u32[KECCAK_state] 
{
  state = _KeccakF1600_StatePermute(state);
  return state;
}

Keccak ~ to_interleave; Keccak_pqm4; from_interleave : ={state} ==> ={state}


op f_to_interleave = ....
op f_from_interleave = ....

to_interleave : s = s0 => res = f_to_interleave
from_interleave : s = s0 => res = f_form_interleave

f_to_interleave (f_form_interleave s) = s 

to_interleave; Keccak_pqm4 ~ 

*/


/*
fn _KeccakF1600_StateXORLane(reg ptr u32[2] lane, reg ptr u32[2] data) 
   -> reg prt u32[2] 
{
  reg u32 s0 s1 d0 d1;
  s0 = lane[0];
  s1 = lane[1];
  d1 = data[0];
  d2 = data[1];
  s0, s1 = __toBitInterleaving(d0, d1, s0, s1);
  lane[0] = s0;
  lane[1] = s1;
  return lane;
}


// param int nlanes 

fn _KeccakF1600_StateXORLanes(reg ptr u32[2 * nlanes] state, reg ptr u32[2 * nlanes] datas) 
   -> reg ptr u32[2 * nlanes]
{
  inline int i;
  for i = 0 to nlanes {
    reg ptr u32[2] lane data;
    lane = state[2*i:2];
    data = datas[2*i:2]
    state[2*i:2] = _KeccakF1600_StateXORLane(lane, data);
  }
  return state;
}




@----------------------------------------------------------------------------
@
@                                     r0                          r1                  r2                   r3   
@ void KeccakF1600_StateXORBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
@
.align 8
.global   KeccakF1600_StateXORBytes
KeccakF1600_StateXORBytes:

if (length <> 0) {
  offset_8 = offset & ~7;
  
  
}
return state;



	cbz		r3, KeccakF1600_StateXORBytes_Exit1
	push	{r4 - r8, lr}							@ then
	bic		r4, r2, #7								@ offset &= ~7
	adds	r0, r0, r4								@ add whole lane offset to state pointer
	ands	r2, r2, #7								@ offset &= 7 (part not lane aligned)
	beq		KeccakF1600_StateXORBytes_CheckLanes	@ .if offset != 0
	movs	r4, r3									@ then, do remaining bytes in first lane
	rsb		r5, r2, #8								@ max size in lane = 8 - offset
	cmp		r4, r5
	ble		KeccakF1600_StateXORBytes_BytesAlign
	movs	r4, r5
KeccakF1600_StateXORBytes_BytesAlign:
	sub		r8, r3, r4								@ size left
	movs	r3, r4
	bl		__KeccakF1600_StateXORBytesInLane
	mov		r3, r8
KeccakF1600_StateXORBytes_CheckLanes:
	lsrs	r2, r3, #3								@ .if length >= 8
	beq		KeccakF1600_StateXORBytes_Bytes
	mov		r8, r3
	bl		__KeccakF1600_StateXORLanes
	and		r3, r8, #7
KeccakF1600_StateXORBytes_Bytes:
	cbz		r3, KeccakF1600_StateXORBytes_Exit
	movs	r2, #0
	bl		__KeccakF1600_StateXORBytesInLane
KeccakF1600_StateXORBytes_Exit:
	pop		{r4 - r8, pc}
KeccakF1600_StateXORBytes_Exit1:
	bx		lr


@----------------------------------------------------------------------------
@
@ __KeccakF1600_StateXORLanes
@
@ Input:
@  r0 state pointer
@  r1 data pointer
@  r2 laneCount
@
@ Output:
@  r0 state pointer next lane
@  r1 data pointer next byte to input
@
@ Changed: r2-r7
@
.align 8
__KeccakF1600_StateXORLanes:
__KeccakF1600_StateXORLanes_LoopAligned:
	ldr		r4, [r1], #4
	ldr		r5, [r1], #4
	ldrd    r6, r7, [r0]
	toBitInterleaving	r4, r5, r6, r7, r3, 0
	strd	r6, r7, [r0], #8
	subs	r2, r2, #1
	bne		__KeccakF1600_StateXORLanes_LoopAligned
	bx		lr

@----------------------------------------------------------------------------
@
@ __KeccakF1600_StateXORBytesInLane
@
@ Input:
@  r0 state pointer
@  r1 data pointer
@  r2 offset in lane
@  r3 length
@
@ Output:
@  r0 state pointer next lane
@  r1 data pointer next byte to input
@
@  Changed: r2-r7
@
.align 8
__KeccakF1600_StateXORBytesInLane:
	movs	r4, #0
	movs	r5, #0
	push	{ r4 - r5 }
	add		r2, r2, sp
__KeccakF1600_StateXORBytesInLane_Loop:
	ldrb	r5, [r1], #1
	strb	r5, [r2], #1
	subs	r3, r3, #1
	bne		__KeccakF1600_StateXORBytesInLane_Loop
	pop		{ r4 - r5 }
	ldrd    r6, r7, [r0]
	toBitInterleaving	r4, r5, r6, r7, r3, 0
	strd	r6, r7, [r0], #8
	bx		lr
*/
