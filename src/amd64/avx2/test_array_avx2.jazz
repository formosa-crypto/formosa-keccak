require "keccak1600_avx2.jinc"

param int BUFLEN = 1741;
param int OUTLEN = 2329;


namespace A1741 {
 param int ASIZE = BUFLEN;
 require "keccak1600_array_avx2_ASIZE.jinc"
}

namespace A2329 {
 param int ASIZE = OUTLEN;
 require "keccak1600_array_avx2_ASIZE.jinc"
}


/*****
 TESTS
*/

export fn test_addpst_avx2
( reg mut ptr u256[7] sta
, reg const ptr u64[25] pst
) -> reg ptr u256[7]
{
  reg u256[7] st;
  inline int i;
  for i = 0 to 7 { st[i] = sta[i]; }
  st = _addpstate_avx2(st, pst);
  for i = 0 to 7 { sta[i] = st[i]; }
  return sta;
}

export fn test_pabsorb_array_avx2
( reg mut ptr u256[7] stm
, reg const ptr u8[BUFLEN] buf
) -> reg ptr u256[7] /* stm */
{
  reg u256[7] st;
  stack u64[25] pst_s;
  reg ptr u64[25] pst;
  reg u64 offset;
  inline int i;
  st = __state_init_avx2();
  pst = pst_s;
  pst = __pstate_init_avx2(pst);
  offset = 0;
  pst, _, st, _ = A1741::__pabsorb_array_avx2(pst, 0, st, buf, offset, BUFLEN, R136, SHA3);
  pst_s = pst;
  for i = 0 to 7 { stm[i] = st[i]; }
  return stm;
}

export fn test_absorb_array_avx2
( reg mut ptr u256[7] stm
, reg const ptr u8[BUFLEN] buf
) -> reg ptr u256[7] /* stm */
{
  reg u256[7] st;
  stack u64[25] pst_s;
  reg ptr u64[25] pst;
  reg u64 offset;
  inline int i;
  st = __state_init_avx2();
  pst = pst_s;
  pst = __pstate_init_avx2(pst);
  offset = 0;
  st, _ = A1741::__absorb_array_avx2(st, buf, offset, BUFLEN, R136, SHA3);
  for i = 0 to 7 { stm[i] = st[i]; }
  return stm;
}

export fn test_shake_array_avx2
( reg mut ptr u256[7] stm
, reg mut ptr u8[OUTLEN] outbuf
, reg const ptr u8[BUFLEN] inbuf
) -> reg ptr u256[7]
   , reg ptr u8[OUTLEN]
{
  reg u256[7] st;
  reg u64 offset;
  inline int i;
  st = __state_init_avx2();
  offset = 0;
  st, _ = A1741::__absorb_array_avx2(st, inbuf, offset, BUFLEN, R136, SHAKE);
  offset = 0;
  outbuf, st = A2329::__squeeze_array_avx2(outbuf, offset, OUTLEN, st, R136);
  for i = 0 to 7 { stm[i] = st[i]; }
  return stm, outbuf;
}

export fn test_keccakF_avx2
( reg mut ptr u256[7] stm
) -> reg ptr u256[7]
{
  reg u256[7] st;
  inline int i;
  st = __state_init_avx2();
  st = _keccakf1600_avx2(st);
  for i = 0 to 7 { stm[i] = st[i]; }
  return stm;
}
