/* */
param int LEN = 11;
/* */

require "keccak1600_bmi1.jinc"

type keccak1600_state = u64[25];
type keccak1600_incstate = u64[26];

/**
 Last u64 word of keccak1600_incstate is filled with:
  - byte[0] - at_position (pre: 0 <= at <= 200)
  - byte[1] - r64-1, where r64 = 8*r8 (rate in bytes) -- (pre: 0 < r64 <= 25)
  - byte[2] - Trail Byte
*/


fn _init_incstate_ref
( reg mut ptr keccak1600_incstate st
, reg ui8 r64 // 9 <= r64 < 25 
, reg u8 trailb // 0 <= trailb < 256
) -> reg ptr keccak1600_incstate /* st */
{
  reg ui64 i;
  reg u64 t, status;

  status = (64u) trailb;
  status <<= 8;
  r64 = (8ui) ((8u)r64 - 1);
  t = (64u) (8u) r64;
  status += t;
  status <<= 8;
  i = 0;
  while (i < 25) { st[i] = 0; i += 1; }
  st[25] = status;

  return st;
}


/**
 When we read the update-data from the state (r8 and at-position), we guarantee
 that it is wellformed, that is:
  - rate in bytes (r8):  0 < r8 < 200  &&  r8 %| 8
  - at-position (at):  0 <= at < r8
 This would allow to establish safety independently of the given state.
*/
fn _ststatus_data
( reg u64 ststatus
) -> reg u8    /* trailb */
   , reg ui64  /* r8 ; 8 %| r8 /\ 0 < r8 <= 200  */
   , reg ui64  /* at  ; 0 <= at < r8 */
/* ensures:
    8 |% r8
    0 < r8 <= 200
    0 <= at < r8  */
{
 reg u64 r8, at, c_0, c_200;
 reg ui64 r8_ui, at_ui;
 reg u8 trailb;

 at = ststatus;
 at &= 0xFF;
 ststatus >>= 8;
 r8 = ststatus;
 r8 &= 255; // 0 <= r8 <= 255
 r8 += 1;   // 0 < r8 <= 256
 r8 <<= 3;  // 8 %| r8  /\  0 < r8 <= 2048
 c_200 = 200;
 r8 = c_200 if r8 > 200;  // 8 %| r8  /\  0 < r8 <= 200
 c_0 = 0;
 at = c_0 if r8 <= at;  // 0 <= at < r8
 ststatus >>= 8;
 trailb = (8u) ststatus;

 r8_ui = (64ui)r8;
 at_ui = (64ui)at;
 return trailb, r8_ui, at_ui;
}

fn _finish_incarray_ref
( reg mut ptr keccak1600_incstate st
) -> reg ptr keccak1600_incstate /* st */
{
  reg u64 ststatus;
  reg ui64 at, r8;
  reg u8 trailb;
  ststatus = st[25];
  trailb, r8, at = _ststatus_data(ststatus);
  st.[:u8 at] ^= trailb;
  st.[:u8 r8-1] ^= 0x80;
  st.[:u32 8*25] &= 0xFF00FF00; // clear trail-byte and at-position
  
  return st;
}


export fn keccak_ststatus
( reg mut ptr u8[3] status
, reg const ptr keccak1600_incstate st
) -> reg ptr u8[3]
{
  reg ui64 r8 at;
  reg u64 ststatus;
  ststatus = st[25];
  _, r8, at = _ststatus_data(ststatus);
  status[0] = (8u) (64u) r8;
  status[1] = (8u) (64u) at;
  status[2] = st.[:u8 8*25+2];
  return status;
}

export fn keccak_init
( reg mut ptr keccak1600_incstate st
, reg ui8 r64
, reg u8 trailb
) -> reg ptr keccak1600_incstate
{
  st = st;
  r64 = r64;
  trailb = trailb;
  st = _init_incstate_ref(st, r64, trailb);
  return st;
}

export fn keccak_finish
( reg mut ptr keccak1600_incstate st
) -> reg ptr keccak1600_incstate /* st */
{
  st = st;
  st = _finish_incarray_ref(st);
  return st;
}

// PARAMETRIC ON "LEN"

inline fn aread_subu64
( reg const ptr u8[LEN] a
, reg ui64 off 
, reg ui64 len // off + len <= LEN
) -> reg ui64 /* off */
   , reg u64  /* data */
{
  reg u64 w, x;
  reg u8 sh;
  reg bool zf;

  if (len >= 8) {
    w = a.[:u64 off];
    off += 8;
  } else {
    _, _, _, _, zf = #TEST((64u)len, 4);
    if (!zf) {
      w = (64u) a.[:u32 off];
      off += 4;
      sh = 32;
    } else {
      w = 0;
      sh = 0;
    }
    _, _, _, _, zf = #TEST((64u)len, 2);
    if (!zf) {
      x = (64u) a.[:u16 off];
      x <<= (sh & 63);
      w += x;
      off += 2;
      sh += 16;
    }
    _, _, _, _, zf = #TEST((64u)len, 1);
    if (!zf) {
      x = (64u) a.[:u8 off];
      x <<= (sh & 63);
      w += x;
      off += 1;
    }
  }
  return off, w;
}

inline fn awrite_subu64
( reg mut ptr u8[LEN] buf
, reg ui64 off
, reg u64 data
, reg ui64 len // off + len <= LEN
) -> reg ui64        /* off */
   , reg ptr u8[LEN] /* buf */
{
  reg bool zf;

  if (len >= 8) {
    buf.[:u64 off] = data;
    off += 8;
  } else {
    _, _, _, _, zf = #TEST((64u)len, 4);
    if (!zf) {
      buf.[:u32 off] = (32u) data;
      off += 4;
      data >>= 32;
    }
    _, _, _, _, zf = #TEST((64u)len, 2);
    if (!zf) {
      buf.[:u16 off] = (16u) data;
      off += 2;
      data >>= 16;
    }
    _, _, _, _, zf = #TEST((64u)len, 1);
    if (!zf) {
      buf.[:u8 off] = (8u) data;
      off += 1;
    }
  }
  return off, buf;
}

fn _add_incarray
( reg mut ptr keccak1600_state st
, reg ui64 at               // 0 <= at < 200
, reg const ptr u8[LEN] buf // at+LEN <= 200 (in fact, r8...)
, reg ui64 off    // off + upto - at <= LEN
, reg ui64 upto    // at <= upto <= 200 (in fact, r8...)
) -> reg ui64                 /* at */
   , reg ui64                 /* off */
   , reg ptr keccak1600_state /* st */
{
  reg u8 sh;
  reg u64 t64, at8 upto8;
  reg ui64 off2, newat, len;

  at8 = (64u) at;
  at8 &= 0x07; // byte position in stword

  if (at8 != 0) { // needs to fill first word...
    len = upto;
    len -= at; // len = upto-at (bytes to process)
    at >>= 3; at <<= 3; // at = 8*(at/8) (start of stword)
    off2, t64 = aread_subu64(buf, off, len);
    len = len + (64ui)at; // bytes from the start of word
    sh = (8u) at8;
    sh <<= 3;   // bits to shift...
    t64 <<= (sh & 63);
    st.[at] ^= t64;
    if (len >= 8) { // need to proccess more stwords...
      off += 8;
      off -= (64ui) at8; // off += (8-at8)
      at += 8;    // start of next stword
    } else { // this is the only affected stword
      off = off2; // 
      at = upto;  // its done!
    }
  }

  // now: at%8==0 || at==upto
  newat = at;
  while
    { newat += 8; }
  ( newat <= upto )
    {
      t64 = buf.[:u64 off];
      st.[at] ^= t64;
      at = newat;
      off += 8;
    }

  // leftovers...
  if (at < upto) {
    upto8 = (64u) upto;
    upto8 &= 0x07;
    off, t64 = aread_subu64(buf, off, (64ui) upto8);
    st.[at] ^= t64;
  }
  
  at = upto;
  return at, off, st;
}

fn _update_incarray_ref
( reg mut ptr keccak1600_incstate st
, reg const ptr u8[LEN] buf
) -> reg ptr keccak1600_incstate /* st */
{
  reg u64 ststatus;
  reg ui64 off, r8, at, upto;
  reg ptr keccak1600_state stk;

  ststatus = st[25];
  _, r8, at = _ststatus_data(ststatus); // 0 < r8 < 200; r8 |% 8; 0 <= at <= r8
  stk = st[0:25];
  () = #spill(st, buf);

  off = 0;
  upto = LEN;
  upto += at;
  while (r8 <= upto) {
    at, off, stk = _add_incarray(stk, at, buf, off, r8);
    () = #spill(r8, at, upto, off);
    stk = _keccakf1600_ref_(stk);
    () = #unspill(r8, at, upto, off, buf);
    upto -= r8;
    at = 0;
  }
  upto = upto;
  () = #unspill(st);
  at, _, stk = _add_incarray(stk, at, buf, off, upto);
  st[0:25] = stk;
  st.[:u8 8*25] = (8u) (64u) at;

  return st;
}

fn _dump_incarray
( reg mut ptr u8[LEN] buf
, reg ui64 off    // off + upto - at <= LEN
, reg const ptr keccak1600_state st
, reg ui64 at     // at+LEN <= r8
, reg ui64 upto   // at <= upto <= r8
) -> reg ui64        /* at */
   , reg ui64        /* off */
   , reg ptr u8[LEN] /* buf */
{
  reg ui64 newat, off2, len;
  reg u64 t64, at8, upto8;
  reg u8 sh;

  at8 = (64u) at;
  at8 &= 0x07; // byte position in stword

  if (at8 != 0) { // needs to dump remainder of first word...
    len = upto;
    len -= at; // len = upto-at (bytes to process)
    at >>= 3; at <<= 3; // at = 8*(at/8) (start of stword)
    t64 = st.[at];
    sh = (8u) at8;
    sh <<= 3;   // bits to shift...
    t64 >>= (sh & 63);
    off2, buf = awrite_subu64(buf, off, t64, len);
    len += (64ui) at8; // bytes from the start of word
    if (len >= 8) {  // need to proccess more stwords...
      off += 8;
      off -= (64ui) at8;
      at += 8;       // start of next stword
    } else {         // this is the only affected stword
      off = off2;
      at = upto;     // its done!
    }
  }

  // now: at%8==0 || at==upto
  newat = at;
  while
    { newat += 8; }
  ( newat <= upto )
    {
      t64 = st.[:u64 at];
      buf.[:u64 off] = t64;
      at = newat;
      off += 8;
    }

  // leftovers...
  if (at < upto) {
    upto8 = (64u) upto;
    upto8 &= 0x07;
    t64 = st.[at];
    off, buf = awrite_subu64(buf, off, t64, (64ui) upto8);
  }

  at = upto;
  return at, off, buf;
}

fn _squeeze_incarray_ref
( reg mut ptr u8[LEN] buf
, reg mut ptr keccak1600_incstate st
) -> reg ptr keccak1600_incstate /* st */
   , reg ptr u8[LEN]             /* buf */
{
  reg u64 ststatus;
  reg ui64 off, len, r8, at;
  reg ptr keccak1600_state stk;

  ststatus = st[25];
  _, r8, at = _ststatus_data(ststatus); // 0 < r8 < 200; r8 |% 8; 0 <= at <= r8
  stk = st[0:25];
  () = #spill(st);

  if ( at == 0 ) {
    () = #spill(buf);
    stk = _keccakf1600_ref_(stk);
    () = #unspill(buf);
    at = 0; // obs: no need to spill/unspill(at)!
  }

  off = 0;
  len = at;
  len += LEN;

  while (r8 < len) {
    at, off, buf = _dump_incarray(buf, off, stk, at, r8);
    () = #spill(r8, at, len, off, buf);
    stk = _keccakf1600_ref_(stk);
    () = #unspill(r8, at, len, off, buf);
    len -= r8;
    at = 0;
  }

  len = len;
  at, _, buf = _dump_incarray(buf, off, stk, at, len);

  () = #unspill(st);
  st[0:25] = stk;
  // if ( at == r8 ) at = 0; // avoidable because r8_at() returns 0<=at<r8
  st.[:u8 8*25] = (8u) (64u) at;

  return st, buf;
}

export fn keccak_update_ref
( reg mut ptr keccak1600_incstate st
, reg const ptr u8[LEN] buf
) -> reg ptr keccak1600_incstate /* st */
{
  st = st;
  buf = buf;
  st = _update_incarray_ref(st, buf);
  return st;
}

export fn keccak_squeeze_ref
( reg mut ptr u8[LEN] buf
, reg mut ptr keccak1600_incstate st
) -> reg ptr u8[LEN] /* buf */
   , reg ptr keccak1600_incstate /* st */
{
  st = st;
  buf = buf;
  st, buf = _squeeze_incarray_ref(buf, st);
  return buf, st;
}
