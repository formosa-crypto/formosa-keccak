/**
    READ A FIXED NUMBER OF BYTES FROM AN ARRAY INTO A WORD

    reads upto min(8,LEN) bytes to be placed at AT position in the state.

**/

inline fn __a_ilen_read_upto8_at
( reg const ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, inline int TRAIL
, inline int CUR
, inline int AT
) -> inline int /* DELTA */
   , inline int /* LEN */
   , inline int /* TRAIL */
   , inline int /* AT */
   , reg u64    /* w */
{
  reg u64 w, t16, t8;
  inline int AT8;

  if ( AT < CUR || CUR+8 <= AT ) { // nothing to be done...
    w = 0;
  } else {
    AT8 = AT-CUR;
    if (8 <= LEN) {
      w = buf.[:u64 (64u) offset + DELTA];
      w <<= 8*AT8;
      DELTA += 8-AT8;
      LEN -= 8-AT8;
      AT8 = 8; 
    } else {
      if (4 <= LEN) {
	w = (64u) buf.[:u32 (64u) offset + DELTA];
	w <<= 8*AT8;
	DELTA += (4+AT8 >= 8 ? 8-AT8 : 4);
	LEN -= (4+AT8 >= 8 ? 8-AT8 : 4);
	AT8 = (4+AT8 >= 8 ? 8 : 4+AT8); // AT8==8: finished!
      } else {
	w = 0;
      }
      if (AT8 < 8 && 2 <= LEN) {
	t16 = (64u) buf.[:u16 (64u) offset + DELTA];
	DELTA += (2+AT8 >= 8 ? 8-AT8 : 2);
	LEN -= (2+AT8 >= 8 ? 8-AT8 : 2);
	t16 <<= 8*AT8;
	w |= t16;
	AT8 = (2+AT8 >= 8 ? 8 : 2+AT8);
      }
      if (AT8 < 8) {
	if ( 1 <= LEN ) {
	  t8 = (64u) buf.[:u8 (64u) offset + DELTA];
	  t8 |= 256*(TRAIL%256);
	  DELTA += 1;
	  LEN -= 1;
	  t8 <<= 8*AT8;
	  w |= t8;
	  AT8 += 1;
	  if (AT8 < 8 && TRAIL%256 != 0) {
	    AT8 += 1;
	    TRAIL = 0;
	  }
	} else if ( TRAIL%256 != 0) {
	  t8 = TRAIL%256;
	  t8 <<= 8*AT8;
	  w |= t8;
	  TRAIL = 0;
	  AT8 += 1;
	}
      }
    }
    AT = CUR + AT8;
  }
  return DELTA, LEN, TRAIL, AT, w; 
}

inline fn __a_ilen_read_upto16_at
( reg const ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, inline int TRAIL
, inline int CUR
, inline int AT
) -> inline int /* DELTA */
   , inline int /* LEN */
   , inline int /* TRAIL */
   , inline int /* AT */
   , reg u128    /* w */
{
  reg u64 t64_0, t64_1;
  reg u128 w;
  inline int AT16;

  if ( AT < CUR || CUR+16 <= AT ) { // nothing to be done...
    w = #set0_128();
  } else {
    AT16 = AT-CUR;
    if ( 8 <= AT16 ) {
      w = #set0_128();
      DELTA, LEN, TRAIL, AT16, t64_1 = __a_ilen_read_upto8_at(buf, offset, DELTA, LEN, TRAIL, 8, AT16);
      w = #VPINSR_2u64(w, t64_1, 1); 
    } else {
      DELTA, LEN, TRAIL, AT16, t64_0 = __a_ilen_read_upto8_at(buf, offset, DELTA, LEN, TRAIL, 0, AT16);
      w = (128u) t64_0;
      DELTA, LEN, TRAIL, AT16, t64_1 = __a_ilen_read_upto8_at(buf, offset, DELTA, LEN, TRAIL, 8, AT16);
      w = #VPINSR_2u64(w, t64_1, 1); 
    }
    AT = CUR+AT16;
  }
  return DELTA, LEN, TRAIL, AT, w; 
}  

inline fn __a_ilen_read_upto32_at
( reg const ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, inline int TRAIL
, inline int CUR
, inline int AT
) -> inline int /* DELTA */
   , inline int /* LEN */
   , inline int /* TRAIL */
   , inline int /* AT */
   , reg u256    /* w */
{
  reg u128 t128_0, t128_1;
  reg u256 w;
  inline int AT32;

  if ( AT < CUR || CUR+32 <= AT ) { // nothing to be done...
    w = #set0_256();
  } else {
    AT32 = AT-CUR;
    if ( 16 <= AT32 ) {
      w = #set0_256();
      DELTA, LEN, TRAIL, AT32, t128_1 = __a_ilen_read_upto16_at(buf, offset, DELTA, LEN, TRAIL, 16, AT32);
      w = #VINSERTI128(w, t128_1, 1); 
    } else {
      DELTA, LEN, TRAIL, AT32, t128_0 = __a_ilen_read_upto16_at(buf, offset, DELTA, LEN, TRAIL,  0, AT32);
      DELTA, LEN, TRAIL, AT32, t128_1 = __a_ilen_read_upto16_at(buf, offset, DELTA, LEN, TRAIL, 16, AT32);
      w = (2u128)[t128_1, t128_0];
    }
    AT = CUR+AT32;
  }
  return DELTA, LEN, TRAIL, AT, w; 
}  


// __aread_subu64
inline fn __a_ilen_read_upto8
( reg const ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, inline int TRAIL
) -> inline int /* DELTA */
   , inline int /* LEN */
   , inline int /* TRAIL */
   , reg u64 /* w */
/* safety */ requires {
 (0 < LEN)
 ? is_arr_init(buf,offset+DELTA,min(LEN,8)) && 0 <= DELTA 
   && 0 <= offset + DELTA && offset + DELTA + min(LEN,8) <= ASIZE
 : true
}
/* safety */ requires { 0 <= TRAIL && TRAIL < 256 }
/* safety */ ensures {
 result.0 == DELTA + max(0,min(LEN,8))
 && result.1 == LEN - max(0,min(LEN,8))
 && result.2 == (8 <=s LEN ? TRAIL : 0)
}
{
  reg u64 w, t16, t8;
  inline int ILEN;
  ILEN = LEN;
  if (LEN <= 0) {
    w = TRAIL % 256;
    TRAIL = 0;
  } else if (8 <= LEN) {
    w = buf.[:u64 offset + DELTA];
    DELTA += 8;
    LEN -= 8;
  } else {
    if (4 <= LEN) {
      w = (64u) buf.[:u32 offset + DELTA];
      DELTA += 4;
      LEN -= 4;
    } else {
      w = 0;
    }
    if (2 <= LEN) {
      t16 = (64u) buf.[:u16 offset + DELTA];
      DELTA += 2;
      LEN -= 2;
    } else {
      t16 = 0;
    }
    if (1 <= LEN || TRAIL%256 != 0) {
      if (1 <= LEN) {
        t8 = (64u) buf.[:u8 offset + DELTA];
        if (TRAIL%256 != 0) { t8 |= 256*(TRAIL%256); }
        DELTA += 1;
        LEN -= 1;
      } else { 
        t8 = TRAIL % 256;
      }
      TRAIL = 0;
      t8 <<= 8*(2*((ILEN/2) % 2));
      t16 |= t8;
    }
    t16 <<= 8*(4*((ILEN/4) % 2));
    w |= t16;
  }
  return DELTA, LEN, TRAIL, w; 
}

// __aread_bcast_4subu64
inline fn __a_ilen_read_bcast_upto8
( reg const ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, inline int TRAIL
) -> inline int /* DELTA */
   , inline int /* LEN */
   , inline int /* TRAIL */
   , reg u256 /* w */
/* safety */ requires {
 (0 < LEN)
 ? is_arr_init(buf,offset+DELTA,min(LEN,8)) && 0 <= DELTA
   && 0 <= offset + DELTA && offset + DELTA + min(LEN,8) <= ASIZE
 : true
}
/* safety */ requires { 0 <= TRAIL && TRAIL < 256 }
/* safety */ ensures {
 result.0 == DELTA + max(0,min(LEN,8))
 && result.1 == LEN - max(0,min(LEN,8))
 && result.2 == (8 <= LEN ? TRAIL : 0)}
{
  reg u64 t64;
  reg u128 t128;
  reg u256 w;
  if (LEN <= 0 && TRAIL%256==0) {
    w = #set0_256();
  } else {
    if (8 <= LEN) {
      w = #VPBROADCAST_4u64(buf.[:u64 offset + DELTA]);
      DELTA += 8;
      LEN -= 8;
    } else {
      DELTA, LEN, TRAIL, t64 = __a_ilen_read_upto8(buf, offset, DELTA, LEN, TRAIL);
      t128 = (128u) t64;
      w = #VPBROADCAST_4u64(t128);
    }
  }
  return DELTA, LEN, TRAIL, w; 
}

// __aread_subu128
inline fn __a_ilen_read_upto16
( reg const ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, inline int TRAIL
) -> inline int /* DELTA */
   , inline int /* LEN */
   , inline int /* TRAIL */
   , reg u128 /* w */
/* safety */ requires {
 (0 < LEN)
 ? is_arr_init(buf,offset+DELTA,min(LEN,16)) && 0 <= DELTA
   && 0 <= offset + DELTA && offset + DELTA + min(LEN,16) <= ASIZE
 : true
}
/* safety */ requires { 0 <= TRAIL && TRAIL < 256 }
/* safety */ ensures {
 result.0 == DELTA + max(0,min(LEN,16))
 && result.1 == LEN - max(0,min(LEN,16))
 && result.2 == (16 <=s LEN ? TRAIL : 0)
}
{
  reg u128 w;
  reg u64 t64;
  if (LEN <=s 0 && TRAIL%256==0) {
    w = #set0_128();
  } else if (16 <=s LEN) {
    w = buf.[:u128 offset + DELTA];
    DELTA += 16;
    LEN -= 16;
  } else {
    if (8 <= LEN) {
      w = #VMOV(buf.[:u64 offset + DELTA]);
      DELTA += 8;
      LEN -= 8;
      DELTA, LEN, TRAIL, t64 = __a_ilen_read_upto8(buf, offset, DELTA, LEN, TRAIL);
      w = #VPINSR_2u64(w, t64, 1); 
    } else {
      DELTA, LEN, TRAIL, t64 = __a_ilen_read_upto8(buf, offset, DELTA, LEN, TRAIL);
      w = (128u) t64;
    }
  }
  return DELTA, LEN, TRAIL, w;
}

// __aread_subu256
inline fn __a_ilen_read_upto32
( reg const ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, inline int TRAIL
) -> inline int /* DELTA */
   , inline int /* LEN */
   , inline int /* TRAIL */
   , reg u256 /* w */
/* safety */ requires {
 (0 < LEN)
 ? is_arr_init(buf,offset+DELTA,min(LEN,32)) && 0 <= DELTA
   && 0 <= offset + DELTA && offset + DELTA + min(LEN,32) <= ASIZE
 : true
}
/* safety */ requires { 0 <= TRAIL && TRAIL < 256 }         
/* safety */ ensures {
 result.0 == DELTA + max(0,min(LEN,32))
 && result.1 == LEN - max(0,min(LEN,32))
 && result.2 == (32 <= LEN ? TRAIL : 0)}
{
  reg u256 w;
  reg u128 t128_0, t128_1;
  if (LEN <=s 0 && TRAIL%256==0) {
    w = #set0_256();
  } else if (32 <=s LEN) {
    w = buf.[:u256 offset + DELTA];
    DELTA += 32;
    LEN -= 32;
  } else {
    if (16 <=s LEN) {
      t128_0 = buf.[:u128 offset + DELTA];
      DELTA += 16;
      LEN -= 16;
      DELTA, LEN, TRAIL, t128_1 = __a_ilen_read_upto16(buf, offset, DELTA, LEN, TRAIL);
      w = (2u128)[t128_1, t128_0];
    } else {
      t128_1 = #set0_128();
      DELTA, LEN, TRAIL, t128_0 = __a_ilen_read_upto16(buf, offset, DELTA, LEN, TRAIL);
      w = (2u128)[t128_1, t128_0];
    }
  }
  return DELTA, LEN, TRAIL, w;
}


/**
    WRITE A FIXED NUMBER OF BYTES FROM AN ARRAY INTO A WORD
**/

// __awrite_subu64
inline fn __a_ilen_write_upto8
( reg mut ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, reg u64 w
) -> reg ptr u8[ASIZE] /* buf */
   , inline int /* DELTA */
   , inline int /* LEN */
/* safety */ requires {
 (0 < LEN)
 ? 0 <= offset + DELTA && 0 <= DELTA
   && offset + DELTA + min(LEN,8) <= ASIZE
 : true
}
/* safety */ ensures {
 result.1 == DELTA + max(0,min(LEN,8))
 && result.2 == LEN - max(0,min(LEN,8))
}
/* safety */ ensures { 
 \all (k \in 0:ASIZE)
   ( is_arr_init(result.0,k,1)
     == ( is_arr_init(buf,k,1)
          || offset + DELTA <= k 
             && k < offset + DELTA + max(0,min(LEN,8))) )
}
{
  if (0 < LEN) {
    if (8 <=s LEN) {
      buf.[:u64 offset + DELTA] = w;
      DELTA += 8;
      LEN -= 8;
    } else {
      if (4 <=s LEN) {
        buf.[:u32 offset + DELTA] = (32u) w;
	w >>= 32;
        DELTA += 4;
        LEN -= 4;
      }
      if (2 <=s LEN) {
        buf.[:u16 offset + DELTA] = (16u) w;
	w >>= 16;
        DELTA += 2;
        LEN -= 2;
      }
      if (1 <=s LEN) {
        buf.[:u8 offset + DELTA] = (8u) w;
        DELTA += 1;
        LEN -= 1;
      }
    }
  }
  return buf, DELTA, LEN; 
}

// __awrite_subu128
inline fn __a_ilen_write_upto16
( reg mut ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, reg u128 w
) -> reg ptr u8[ASIZE] /* buf */
   , inline int        /* DELTA */
   , inline int        /* LEN */
/* safety */ requires {
 (0 < LEN)
 ? 0 <= offset + DELTA && 0 <= DELTA
   && offset + DELTA + min(LEN,16) <= ASIZE
 : true
}
/* safety */ ensures {
 result.1 == DELTA + max(0,min(LEN,16))
 && result.2 == LEN - max(0,min(LEN,16))
}
/* safety */ ensures {
 \all (k \in 0:ASIZE)
   ( is_arr_init(result.0,k,1)
     == ( is_arr_init(buf,k,1)
          || (offset + DELTA <= k 
             && k < offset + DELTA + max(0,min(LEN,16)))) )
}
{
  reg u64 t64;
  if (0 < LEN) {
    if (16 <=s LEN) {
      buf.[:u128 offset + DELTA] = w;
      DELTA += 16;
      LEN -= 16;
    } else {
      if (8 <=s LEN) {
        buf.[:u64 offset + DELTA] = #MOVV(w);
        DELTA += 8;
        LEN -= 8;
        w = #VPUNPCKH_2u64(w, w);
      }
      t64 = (64u) w;
      buf, DELTA, LEN = __a_ilen_write_upto8(buf, offset, DELTA, LEN, t64);
    }
  }
  return buf, DELTA, LEN;
}

// __awrite_subu256
inline fn __a_ilen_write_upto32
( reg mut ptr u8[ASIZE] buf
, reg ui64 offset
, inline int DELTA
, inline int LEN
, reg u256 w
) -> reg ptr u8[ASIZE] /* buf */
   , inline int /* DELTA */
   , inline int /* LEN */
/* safety */ requires {
 (0 < LEN)
 ? 0 <= offset + DELTA && 0 <= DELTA && offset + DELTA + min(LEN,32) <= ASIZE
 : true
}
/* safety */ ensures {
 result.1 == DELTA + max(0,min(LEN,32)) && result.2 == LEN - max(0,min(LEN,32))}
/* safety */ ensures {
 \all (k \in 0:ASIZE)
   ( is_arr_init(result.0,k,1)
     == ( is_arr_init(buf,k,1)
          || (offset + DELTA <= k 
              && k < offset + DELTA + max(0,min(LEN,32)))) )
}
{
  reg u128 t128;
  if (0 < LEN) {
    if (32 <= LEN) {
      buf.[:u256 offset + DELTA] = w;
      DELTA += 32;
      LEN -= 32;
    } else {
      t128 = (128u) w;
      if (16 <= LEN) {
        buf.[:u128 offset + DELTA] = t128;
        DELTA += 16;
        LEN -= 16;
        t128 = #VEXTRACTI128(w, 1);
      }
      buf, DELTA, LEN = __a_ilen_write_upto16(buf, offset, DELTA, LEN, t128);
    }
  }
  return buf, DELTA, LEN;
}


/**
    READ A VARIABLE NUMBER OF BYTES FROM AN ARRAY INTO A WORD
**/

inline fn __a_rlen_read_upto8
( reg const ptr u8[ASIZE] a
, reg ui64 off 
, reg ui64 len // off + len <= ASIZE
) -> reg ui64 /* off */
   , reg u64  /* data */
/* safety */ requires {
 (0 < len)
 ? is_arr_init(a,off,min(len,8))
   && 0 <= off && off + min(len,8) <= ASIZE
 : true
}
/* safety */ ensures { result.0 == off + min(len,8) }
{
  reg u64 w, x;
  reg u8 sh;
  reg bool zf;

  if (len >= 8) {
    w = a.[:u64 off];
    off += 8;
  } else {
    _, _, _, _, zf = #TEST((64u)len, 4);
    if (!zf) {
      w = (64u) a.[:u32 off];
      off += 4;
      sh = 32;
    } else {
      w = 0;
      sh = 0;
    }
    _, _, _, _, zf = #TEST((64u)len, 2);
    if (!zf) {
      x = (64u) a.[:u16 off];
      x <<= (sh & 63);
      w += x;
      off += 2;
      sh += 16;
    }
    _, _, _, _, zf = #TEST((64u)len, 1);
    if (!zf) {
      x = (64u) a.[:u8 off];
      x <<= (sh & 63);
      w += x;
      off += 1;
    }
  }
  return off, w;
}

/**
    WRITE A VARIABLE NUMBER OF BYTES FROM AN ARRAY INTO A WORD
**/

inline fn __a_rlen_write_upto8
( reg mut ptr u8[ASIZE] buf
, reg ui64 off
, reg u64 data
, reg ui64 len // off + len <= ASIZE
) -> reg ptr u8[ASIZE] /* buf */
   , reg ui64          /* off */
/* safety */ requires {
 (0 < len)
 ? 0 <= off && off + min(len,8) <= ASIZE
 : true
}
/* safety */ ensures { 
 \all (k \in 0:ASIZE)
   ( is_arr_init(result.0,k,1)
     == (is_arr_init(buf,k,1) || off <= k && k < off + min(len,8)) )
}
{
  reg bool zf;

  if (len >= 8) {
    buf.[:u64 off] = data;
    off += 8;
  } else {
    _, _, _, _, zf = #TEST((64u)len, 4);
    if (!zf) {
      buf.[:u32 off] = (32u) data;
      off += 4;
      data >>= 32;
    }
    _, _, _, _, zf = #TEST((64u)len, 2);
    if (!zf) {
      buf.[:u16 off] = (16u) data;
      off += 2;
      data >>= 16;
    }
    _, _, _, _, zf = #TEST((64u)len, 1);
    if (!zf) {
      buf.[:u8 off] = (8u) data;
      off += 1;
    }
  }
  return buf, off;
}


