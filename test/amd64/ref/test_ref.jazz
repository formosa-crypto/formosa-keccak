from Keccak require "ref/select_bmi1.jinc"
from Keccak require "ref/keccak1600_fixedsizes.jinc"

param int RATE8 = R168;
param int TRAIL = SHAKE;

param int SIZE = RATE8+15; // 183
param int REPS = RATE8/15; // 11

param int BIGSIZE = SIZE*(REPS+1); // 2196

export fn get_params
( reg mut ptr u64[4] params
) -> reg ptr u64[4]  /* params */
{
  params[0] = RATE8;
  params[1] = TRAIL;
  params[2] = SIZE;
  params[3] = BIGSIZE;
  return params;
}

export fn init_state
( reg mut ptr u64[25] st
) -> reg ptr u64[25]
{
  st = st;
  st = __state_init_ref(st);
  return st;
}


namespace TEST_AT {

  param int ASIZE = SIZE;

  from Keccak require "ref/keccak1600_fixedsizes_ASIZE.jinc"

    export fn absorb_ref
    ( reg mut ptr u64[25] st
    , reg const ptr u8[BIGSIZE] buf
    ) -> reg ptr u64[25] /* st */
    {
      inline int i, AT;
      reg ptr u8[ASIZE] b;
      st = st; buf = buf;
      () = #spill(buf);
      AT = 0;
      for i = 0 to BIGSIZE/SIZE-1 {
	() = #unspill(buf);
	b = buf[i*ASIZE:ASIZE];
	st, AT = __absorb_at_ref(st, AT, b, 0);
      }
      () = #unspill(buf);
      b = buf[(BIGSIZE/SIZE-1)*ASIZE:ASIZE];
      st, AT = __absorb_at_ref(st, AT, b, TRAIL);
      st = st;
      return st;
    }
}

namespace TEST_ONESHOT {

  param int ASIZE = BIGSIZE;

  from Keccak require "ref/keccak1600_fixedsizes_ASIZE.jinc"

    export fn absorb_ref
    ( reg mut ptr u64[25] st
    , reg const ptr u8[ASIZE] buf
    ) -> reg ptr u64[25] /* st */
    {
      st = st; buf = buf;
      st, _ = __absorb_at_ref(st, 0, buf, TRAIL);
      st = st;
      return st;
    }

  export fn squeeze_ref
  ( reg mut ptr u8[ASIZE] buf
  , reg mut ptr u64[25] st
  ) -> reg ptr u8[ASIZE] /* buf */
     , reg ptr u64[25]   /* st */
  {
    buf = buf; st = st;
    buf, st = __squeeze_array_ref(buf, st);
    return buf, st;
  }

}


from Keccak require "ref/keccak1600_updstate.jinc"

namespace TEST_UPD {

  param int ASIZE = SIZE;

  from Keccak require "ref/keccak1600_updstate_ASIZE.jinc"

}
